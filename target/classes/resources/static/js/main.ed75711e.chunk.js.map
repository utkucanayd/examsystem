{"version":3,"sources":["components/CreateExam.js","components/Exam.js","components/ExamList.js","components/Login.js","App.js","reportWebVitals.js","index.js"],"names":["CreateExam","props","handleChangeExamName","e","setState","examName","target","value","handleChangeStartDate","date","moment","toDate","startDate","handleChangeEndDate","endDate","addQuestion","t","g","p","o","clear","questions","state","text","cloneDeep","grade","penalty","options","counter","alert","checkIsAnyAnswerExist","push","questionId","questionText","control","forEach","option","isAnswer","handleChangeQuestionText","id","question","handleChangeGrade","deleteOption","qId","oId","newOptions","optionId","length","deleteQuestion","handleChangeAnswer","handleChangeOptionText","optionText","newQuestions","renderQuestions","className","map","Label","Input","defaultValue","onChange","Button","color","onClick","Table","checkGradeSum","sum","parseFloat","console","log","prepareJSON","handleSubmit","exam","axios","post","then","res","data","history","go","Alert","this","f","k","h","l","size","React","Component","ExamInfo","type","bsSize","name","AddQuestion","alertMessage","alertControl","addOption","a","answer","renderAddedOptions","disabled","clearStates","document","getElementById","AddOption","handleChaneOptionText","handleChangeIsAnswer","checked","withRouter","Exam","calculateGrade","answers","answerKey","studentExam","studentAnswers","studentAnswer","student","componentDidMount","get","location","pathname","examId","studentId","createAnswerKey","selectedOption","list","selected","item","isAnsweredBefore","Date","getTime","isTooLate","onChangeAnswer","checkedList","newAnswer","deleteFromAnswers","newAnswers","Question","temp","findQuestionChecked","onChangeOption","ExamList","exams","path","instructor","format","Login","username","password","user","handleUsername","handlePassword","showAlert","Form","onSubmit","preventDefault","FormGroup","for","placeholder","App","Switch","exact","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ed75711e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {Alert, Button, Form, FormGroup, Input, Label, ModalFooter, Table} from \"reactstrap\";\r\nimport moment from \"moment\";\r\nimport axios from \"axios\";\r\nimport cloneDeep from 'lodash/cloneDeep';\r\nimport \"../styles/CreateExam.css\";\r\nimport {withRouter} from \"react-router-dom\";\r\n\r\n\r\nclass CreateExam extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            examName: \"\",\r\n            startDate: null,\r\n            endDate: null,\r\n            questions: [],\r\n            counter: 1,\r\n            alert: \"\",\r\n\r\n        }\r\n    }\r\n\r\n    handleChangeExamName = (e) => {\r\n        this.setState({examName: e.target.value})\r\n    }\r\n    handleChangeStartDate = (e) => {\r\n        const date = moment(e.target.value).toDate()\r\n        this.setState({startDate: date})\r\n    }\r\n    handleChangeEndDate = (e) => {\r\n        const date = moment(e.target.value).toDate()\r\n        this.setState({endDate: date})\r\n    }\r\n\r\n    addQuestion = (t, g, p, o, clear) => {\r\n        const questions = this.state.questions\r\n        const text = cloneDeep(t)\r\n        const grade = cloneDeep(g)\r\n        const penalty = cloneDeep(p)\r\n        const options = cloneDeep(o)\r\n        let counter = this.state.counter\r\n        if (text !== \"\") {\r\n            this.setState({alert: \"\"})\r\n            if (this.checkIsAnyAnswerExist(options) === true) {\r\n                this.setState({alert: \"\"})\r\n                questions.push({\r\n                    questionId: counter,\r\n                    questionText: text,\r\n                    options: options,\r\n                    grade: grade,\r\n                    penalty: penalty,\r\n                })\r\n                counter = counter + 1\r\n                this.setState({questions: questions, counter: counter})\r\n                clear()\r\n            } else {\r\n                this.setState({alert: \"noAnswer\"})\r\n            }\r\n\r\n\r\n        } else {\r\n            this.setState({alert: \"emptyQuestionText\"})\r\n        }\r\n\r\n    }\r\n\r\n    checkIsAnyAnswerExist = (options) => {\r\n        let control = false\r\n        options.forEach(option => {\r\n            if (option.isAnswer === true) {\r\n                control = true;\r\n            }\r\n        })\r\n        return control\r\n    }\r\n    handleChangeQuestionText = (e, id) => {\r\n        let questions = this.state.questions\r\n        questions.forEach(question => {\r\n            if (question.questionId === id) {\r\n                question.questionText = e.target.value\r\n            }\r\n        })\r\n        this.setState({questions: questions})\r\n    }\r\n    handleChangeGrade = (e, id) => {\r\n        let questions = this.state.questions\r\n        questions.forEach(question => {\r\n            if (question.questionId === id) {\r\n                question.grade = e.target.value\r\n            }\r\n        })\r\n        this.setState({questions: questions})\r\n    }\r\n\r\n    deleteOption = (qId, oId) => {\r\n        let questions = this.state.questions\r\n        let newOptions = []\r\n        let selectedQuestion = {}\r\n        questions.forEach(question => {\r\n            if (question.questionId === qId) {\r\n                selectedQuestion = question\r\n                question.options.forEach(option => {\r\n                    if (option.optionId !== oId) {\r\n                        newOptions.push(option)\r\n                    }\r\n                })\r\n                question.options = newOptions\r\n\r\n            }\r\n\r\n        })\r\n\r\n        if (newOptions.length === 0) {\r\n            this.deleteQuestion(qId)\r\n        } else {\r\n            this.setState({questions: questions})\r\n        }\r\n    }\r\n    handleChangeAnswer = (qId, oId) => {\r\n        let questions = this.state.questions\r\n        questions.forEach(question => {\r\n            if (question.questionId === qId) {\r\n                question.options.forEach(option => {\r\n                    if (option.optionId !== oId) {\r\n                        option.isAnswer = false\r\n                    } else {\r\n                        option.isAnswer = true\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        this.setState({questions: questions})\r\n    }\r\n    handleChangeOptionText = (e, qId, oId) => {\r\n        let questions = this.state.questions\r\n        questions.forEach(question => {\r\n            if (question.questionId === qId) {\r\n                question.options.forEach(option => {\r\n                    if (option.optionId !== oId) {\r\n                        option.optionText = e.target.value\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        this.setState({questions: questions})\r\n    }\r\n    deleteQuestion = (id) => {\r\n        let questions = this.state.questions\r\n        let newQuestions = []\r\n        questions.forEach(question => {\r\n            if (question.questionId !== id) {\r\n                newQuestions.push(question)\r\n            }\r\n        })\r\n        this.setState({questions: newQuestions})\r\n    }\r\n    renderQuestions = () => {\r\n        if (this.state.counter === 1) {\r\n            return null\r\n        } else {\r\n            return (\r\n                <div className=\"addedQuestions\">\r\n                    {this.state.questions.map(question => {\r\n                        return (\r\n                            <div key={question.questionId} className=\"question\">\r\n\r\n                                <div>\r\n                                    <Label className=\"col-12\">\r\n                                        <h3>Q{question.questionId})</h3>\r\n                                        <Input id={\"question\" + question.questionId}\r\n                                               defaultValue={question.questionText}\r\n                                               onChange={(e) => this.handleChangeQuestionText(e, question.questionId)}/>\r\n                                    </Label>\r\n                                </div>\r\n                                <div>\r\n                                    <Label className=\"col-3\">\r\n                                        Grade:{' '}\r\n                                        <Input id={\"grade\" + question.questionId} defaultValue={question.grade}\r\n                                               onChange={(e) => this.handleChangeGrade(e, question.questionId)}/>\r\n                                    </Label>\r\n                                    <Button className=\"btn btn-danger\" color=\"danger\"\r\n                                            onClick={() => this.deleteQuestion(question.questionId)}>Delete</Button>\r\n                                </div>\r\n\r\n                                <div className=\"options\">\r\n                                    <Table>\r\n                                        <thead>\r\n                                        <tr>\r\n                                            <th>Option Text</th>\r\n                                            <th>Is Answer</th>\r\n                                            <th>Select as Answer</th>\r\n                                            <th>Delete</th>\r\n                                        </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                        {question.options.map(option => {\r\n                                            return (\r\n                                                <tr key={option.optionId}>\r\n                                                    <td><Input id={\"option\" + option.optionId}\r\n                                                               defaultValue={option.optionText}\r\n                                                               onChange={(e) => this.handleChangeOptionText(e, question.questionId, option.optionId)}/>\r\n                                                    </td>\r\n                                                    <td>{option.isAnswer && <h5>True</h5>}\r\n                                                        {!option.isAnswer && <h5>False</h5>}</td>\r\n                                                    <td><Button className=\"btn btn-primary\" color=\"primary\"\r\n                                                                onClick={() => this.handleChangeAnswer(question.questionId, option.optionId)}>Select</Button>\r\n                                                    </td>\r\n                                                    <td><Button className=\"btn btn-danger\" color=\"danger\"\r\n                                                                onClick={() => this.deleteOption(question.questionId, option.optionId)}>Delete</Button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            )\r\n                                        })}\r\n                                        </tbody>\r\n                                    </Table>\r\n                                </div>\r\n                            </div>)\r\n                    })}\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    checkGradeSum = () => {\r\n        let sum = 0\r\n        this.state.questions.forEach(question => {\r\n            sum = sum + parseFloat(question.grade)\r\n        })\r\n        console.log(sum)\r\n        return sum === 100.0\r\n    }\r\n    prepareJSON = () => {\r\n        let questions = []\r\n        this.state.questions.forEach(question => {\r\n            let options = []\r\n            question.options.map(option => {\r\n                options.push({\r\n                    optionText: option.optionText,\r\n                    isAnswer: option.isAnswer,\r\n                })\r\n            })\r\n            questions.push({\r\n                questionText: question.questionText,\r\n                grade: question.grade,\r\n                penalty: question.penalty,\r\n                options: options\r\n            })\r\n\r\n        })\r\n        const exam = {\r\n            examName: this.state.examName,\r\n            startDate: this.state.startDate,\r\n            endDate: this.state.endDate,\r\n            questions: questions\r\n        }\r\n        return exam\r\n    }\r\n    handleSubmit = () => {\r\n        if(this.state.examName===\"\"){\r\n            this.setState({alert: \"emptyExamName\"})\r\n        }else{\r\n            this.setState({alert: \"\"})\r\n            if(this.state.questions.length!==0){\r\n                this.setState({alert: \"\"})\r\n                if(this.state.startDate!==null){\r\n                    this.setState({alert: \"\"})\r\n                    if(this.state.endDate!==null){\r\n                        this.setState({alert: \"\"})\r\n                        if (this.checkGradeSum()) {\r\n                            this.setState({alert: \"\"})\r\n                            const exam = this.prepareJSON()\r\n                            console.log(exam)\r\n                            axios.post(\"/api/create/exam\", exam).then\r\n                            (res => {\r\n                                console.log(res)\r\n                                console.log(res.data)\r\n                            })\r\n                            console.log(exam)\r\n                            this.setState({alert: false})\r\n                            this.props.history.go(0)\r\n                        } else {\r\n                            this.setState({alert: \"sum\"})\r\n                        }\r\n                    }else{\r\n                        this.setState({alert: \"emptyEndDate\"})\r\n                    }\r\n\r\n\r\n                }else{\r\n                    this.setState({alert: \"emptyStartDate\"})\r\n                }\r\n            }else{\r\n                this.setState({alert: \"thereIsNoQuestion\"})\r\n            }\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n    }\r\n    alert = () => {\r\n        if (this.state.alert === \"sum\") {\r\n            return (<Alert color=\"danger\">The sum of the question grades must be equal to 100</Alert>)\r\n        } else if (this.state.alert === \"noAnswer\") {\r\n            return (<Alert color=\"danger\">Question doesn't have any answer!</Alert>)\r\n        } else if (this.state.alert === \"emptyQuestionText\") {\r\n            return (<Alert color=\"danger\">Question Text is Empty!</Alert>)\r\n        } else if (this.state.alert === \"emptyExamName\") {\r\n            return (<Alert color=\"danger\">Exam Name is Empty!</Alert>)\r\n        } else if (this.state.alert === \"emptyStartDate\") {\r\n            return (<Alert color=\"danger\">Pick a Start Date!</Alert>)\r\n        } else if (this.state.alert === \"emptyEndDate\") {\r\n            return (<Alert color=\"danger\">Pick a End Date!</Alert>)\r\n        }else if (this.state.alert === \"thereIsNoQuestion\") {\r\n            return (<Alert color=\"danger\">No question Added!</Alert>)\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"createExam \">\r\n                <div>\r\n                    <div className=\"col text-center\">\r\n                        <h1>Create New Exam</h1>\r\n                    </div>\r\n                    {this.alert()}\r\n                </div>\r\n                <ExamInfo handleChangeExamName={(e) => this.handleChangeExamName(e)}\r\n                          handleChangeStartDate={(e) => this.handleChangeStartDate(e)}\r\n                          handleChangeEndDate={(e) => this.handleChangeEndDate(e)}/>\r\n                {this.renderQuestions()}\r\n                <AddQuestion addQuestion={(e, f, k, h, l) => this.addQuestion(e, f, k, h, l)}/>\r\n                <div className=\"col text-center\">\r\n                    <Button color=\"primary\" size=\"lg\" className=\"button submitButton\"\r\n                            onClick={this.handleSubmit}>Submit</Button>\r\n                </div>\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass ExamInfo extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"border examInfo\">\r\n                <div>\r\n                    <Label>\r\n                        Exam Name :\r\n                        <Input type=\"text\" onChange={this.props.handleChangeExamName}/>\r\n                    </Label>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-6\">\r\n                        <Label>\r\n                            Start Date:\r\n                            <Input\r\n                                id=\"startDate\"\r\n                                bsSize=\"lg\"\r\n                                type=\"datetime-local\"\r\n                                name=\"startDate\"\r\n                                onChange={this.props.handleChangeStartDate}\r\n                            />\r\n                        </Label>\r\n                    </div>\r\n                    <div className=\"col-6\">\r\n                        <Label>\r\n                            End Date:\r\n                            <Input\r\n                                id=\"endDate\"\r\n                                bsSize=\"lg\"\r\n                                type=\"datetime-local\"\r\n                                name=\"endDate\"\r\n                                onChange={this.props.handleChangeEndDate}\r\n                            />\r\n                        </Label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass AddQuestion extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            questionText: \"\",\r\n            grade: 0.0,\r\n            penalty: 0.0,\r\n            options: [],\r\n            counter: 1,\r\n            alertControl: \"\",\r\n\r\n        }\r\n    }\r\n\r\n\r\n    handleChangeQuestionText = (e) => {\r\n        this.setState({questionText: e.target.value})\r\n    }\r\n    alertMessage = () => {\r\n        let control = this.state.alertControl\r\n        if (control === \"emptyOptionText\") {\r\n            return <Alert color=\"danger\">Option Text is Empty!</Alert>\r\n        } else if (control === \"noAnswer\") {\r\n            return <Alert color=\"danger\">Question Must has an Answer!</Alert>\r\n        } else {\r\n            return null\r\n        }\r\n\r\n    }\r\n    addOption = (t, a, clear) => {\r\n        if (t !== \"\") {\r\n            const text = cloneDeep(t)\r\n            const answer = cloneDeep(a)\r\n            const options = this.state.options\r\n            if (answer) {\r\n                options.forEach(option => {\r\n                        if (option.isAnswer === true) {\r\n                            option.isAnswer = false\r\n                        }\r\n                    }\r\n                )\r\n            }\r\n            options.push({\r\n                optionId: this.state.counter,\r\n                optionText: text,\r\n                isAnswer: answer,\r\n            })\r\n            const counter = this.state.counter + 1\r\n            this.setState({counter: counter, options: options})\r\n            this.setState({alertControl: \"\"})\r\n            clear()\r\n        } else {\r\n            this.setState({alertControl: \"emptyOptionText\"})\r\n        }\r\n\r\n    }\r\n    handleChangeAnswer = (id) => {\r\n        let options = this.state.options\r\n        options.forEach(option => {\r\n            if (option.optionId === id) {\r\n                option.isAnswer = true\r\n            } else {\r\n                option.isAnswer = false\r\n            }\r\n        })\r\n        this.setState({options: options})\r\n    }\r\n    deleteOption = (id) => {\r\n        let options = this.state.options\r\n        let newOptions = []\r\n        options.forEach(option => {\r\n            if (option.optionId !== id) {\r\n                newOptions.push(option)\r\n            }\r\n        })\r\n        this.setState({options: newOptions})\r\n    }\r\n    handleChangeOptionText = (e, id) => {\r\n        let options = this.state.options\r\n        options.forEach(option => {\r\n            if (option.optionId === id) {\r\n                option.optionText = e.target.value\r\n            }\r\n        })\r\n        this.setState({options: options})\r\n    }\r\n\r\n    renderAddedOptions = () => {\r\n        if (this.state.counter === 1) {\r\n            return null\r\n        } else {\r\n            return (\r\n                <div className=\"border addedOptions\">\r\n\r\n                    <Table>\r\n                        <thead>\r\n                        <tr>\r\n                            <th>Option Text</th>\r\n                            <th>Is Answer</th>\r\n                            <th>Select as Answer</th>\r\n                            <th>Delete</th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {this.state.options.map(option => {\r\n                            return (\r\n                                <tr key={option.optionId}>\r\n                                    <td><Input id={option.optionId} disabled={false}\r\n                                               defaultValue={option.optionText}\r\n                                               onChange={(e) => this.handleChangeOptionText(e, option.optionId)}/>\r\n                                    </td>\r\n                                    <td>{option.isAnswer && <h5>True</h5>}\r\n                                        {!option.isAnswer && <h5>False</h5>}</td>\r\n                                    <td><Button className=\"btn btn-primary\" color=\"primary\"\r\n                                                onClick={() => this.handleChangeAnswer(option.optionId)}>Select</Button>\r\n                                    </td>\r\n                                    <td><Button className=\"btn btn-danger\" color=\"danger\"\r\n                                                onClick={() => this.deleteOption(option.optionId)}>Delete</Button>\r\n                                    </td>\r\n                                </tr>\r\n                            )\r\n                        })}\r\n                        </tbody>\r\n                    </Table>\r\n\r\n\r\n                </div>\r\n            )\r\n        }\r\n\r\n    }\r\n\r\n    clearStates = () => {\r\n        document.getElementById(\"questionText\").value = \"\"\r\n        document.getElementById(\"grade\").value = \"\"\r\n        this.setState({questionText: \"\", options: [], counter: 1, grade: 0.0, penalty: 0.0, alertControl: \"\"})\r\n    }\r\n    handleChangeGrade = (e) => {\r\n        const grade = e.target.value\r\n        const penalty = grade * 33 / 100\r\n        this.setState({grade: grade, penalty: penalty})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"addQuestion\">\r\n                <div>\r\n                    <Label>\r\n                        Question Text:\r\n                        <Input type=\"text\" onChange={this.handleChangeQuestionText} id=\"questionText\"/>\r\n                    </Label>\r\n                    <Label>\r\n                        Grade:\r\n                        <Input type=\"text\" onChange={this.handleChangeGrade} id=\"grade\"/>\r\n                    </Label>\r\n                </div>\r\n                {this.renderAddedOptions()}\r\n                <div>\r\n                    {this.alertMessage()}\r\n                </div>\r\n                <AddOption\r\n                    addOption={(e, f, k) => this.addOption(e, f, k)}/>\r\n                <div className=\"col text-right\">\r\n                    <Button\r\n                        color=\"success\"\r\n                        size=\"lg\"\r\n                        className=\"button\"\r\n                        onClick={() => this.props.addQuestion(this.state.questionText, this.state.grade, this.state.penalty, this.state.options, () => this.clearStates())}>Add\r\n                        Question</Button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass AddOption extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            optionText: \"\",\r\n            isAnswer: false,\r\n        }\r\n    }\r\n\r\n    handleChaneOptionText = (e) => {\r\n        this.setState({optionText: e.target.value})\r\n    }\r\n    handleChangeIsAnswer = () => {\r\n        const isAnswer = !this.state.isAnswer\r\n        this.setState({isAnswer: isAnswer})\r\n    }\r\n    clearStates = () => {\r\n        document.getElementById(\"optionText\").value = \"\"\r\n        document.getElementById(\"isAnswer\").checked = false\r\n        this.setState({optionText: \"\", isAnswer: false})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"addOption\">\r\n                <div>\r\n                    <Label>\r\n                        Option Text:\r\n                        <Input type=\"text\" onChange={this.handleChaneOptionText} id=\"optionText\"/>\r\n                    </Label>\r\n                    <Label className=\"deneme\">\r\n                        isAnswer:\r\n                        <Input type=\"checkbox\" className=\"deneme \" onChange={this.handleChangeIsAnswer} id=\"isAnswer\"/>\r\n                    </Label>\r\n                </div>\r\n                <div className=\"col text-right\">\r\n                    <Button\r\n                        color=\"success\" size=\"lg\" className=\"button\"\r\n                        onClick={() => this.props.addOption(this.state.optionText, this.state.isAnswer, () => this.clearStates())}>Add\r\n                        Option</Button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(CreateExam)","import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {Alert, Button, Form, FormGroup, Input, Label, ModalFooter, Table} from \"reactstrap\";\r\nimport axios from \"axios\";\r\nimport React from \"react\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport moment from \"moment\";\r\n\r\n\r\nclass Exam extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            exam: {},\r\n            studentExam:null,\r\n            grade:0.0,\r\n            answerKey:[],\r\n            isTooLate:false,\r\n        }\r\n    }\r\n    calculateGrade=()=>{\r\n        let answers=this.state.answerKey\r\n        let grade=0.0\r\n        this.state.studentExam.studentAnswers.forEach(studentAnswer=>{\r\n            answers.forEach(answer=>{\r\n                if(answer.questionId===studentAnswer.questionId){\r\n                    if(answer.optionId===studentAnswer.optionId){\r\n                        grade=grade+parseFloat(answer.grade)\r\n                    }\r\n                }\r\n            })\r\n        })\r\n        let student=this.state.studentExam\r\n        student.grade=grade\r\n        this.setState({grade:grade,studentExam:student})\r\n\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        let examId=null;\r\n        axios.get(`/api/${this.props.location.pathname}`).then(\r\n            res => {\r\n                console.log(res.data.examId)\r\n                examId=res.data.examId\r\n                const studentExam={\r\n                    examId:examId,\r\n                    studentId:2,\r\n                    grade:0.0,\r\n                    date:null,\r\n                    studentAnswers:[],\r\n                }\r\n                this.setState({studentExam:studentExam})\r\n                this.setState({exam: res.data})\r\n                this.createAnswerKey()\r\n            }\r\n        )\r\n    }\r\n\r\n    createAnswerKey=()=>{\r\n        let answers=[]\r\n        this.state.exam.questions.forEach(question=>{\r\n            question.options.forEach(option=>{\r\n                if(option.isAnswer===true){\r\n                    console.log(\"question grade:\",question.grade)\r\n                    answers.push({\r\n                        questionId:question.questionId,\r\n                        optionId:option.optionId,\r\n                        grade:question.grade\r\n                    })\r\n                }\r\n            })\r\n        })\r\n        this.setState({answerKey:answers})\r\n    }\r\n\r\n    selectedOption = (list) => {\r\n        let selected = null\r\n        list.forEach(item => {\r\n            if (item.checked === true) {\r\n                selected = item.optionId\r\n            }\r\n        })\r\n        return selected\r\n    }\r\n    isAnsweredBefore = (answers, id) => {\r\n        let control = false\r\n        answers.forEach(answer => {\r\n            if (answer.questionId === id) {\r\n                control = true\r\n            }\r\n        })\r\n        return control\r\n    }\r\n    handleSubmit=()=>{\r\n        let date= new Date()\r\n        this.calculateGrade()\r\n        if(date.getTime()>moment(this.state.exam.endDate)){\r\n            this.setState({isTooLate:true})\r\n        }else{\r\n\r\n\r\n            axios.post(\"/api/take/exam\",this.state.studentExam).then\r\n            (res=>{\r\n                console.log(res)\r\n                console.log(res.data)\r\n            })\r\n            this.props.history.push(\"/examList\")\r\n        }\r\n\r\n    }\r\n\r\n    onChangeAnswer = (checkedList, id) => {\r\n        let selected = this.selectedOption(checkedList)\r\n        let studentExam = this.state.studentExam\r\n        if (selected !== null) {\r\n            if (this.isAnsweredBefore(studentExam.studentAnswers, id)) {\r\n                studentExam.studentAnswers.forEach(answer => {\r\n                    if (answer.questionId === id) {\r\n                        answer.optionId = selected\r\n                    }\r\n                })\r\n            } else {\r\n                const newAnswer = {\r\n                    questionId: id,\r\n                    optionId: selected,\r\n                }\r\n                studentExam.studentAnswers.push(newAnswer)\r\n            }\r\n        } else {\r\n\r\n            if (this.isAnsweredBefore(studentExam.studentAnswers, id)) {\r\n                studentExam.studentAnswers.forEach(answer => {\r\n                    if (answer.questionId === id) {\r\n                        studentExam.studentAnswers = this.deleteFromAnswers(studentExam.studentAnswers, id)\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        this.setState({studentExam: studentExam})\r\n\r\n    }\r\n    deleteFromAnswers = (answers, id) => {\r\n        let newAnswers = []\r\n        answers.forEach(answer => {\r\n            if (answer.questionId !== id) {\r\n                const newAnswer = {\r\n                    questionId: answer.questionId,\r\n                    optionId: answer.optionId,\r\n                }\r\n                newAnswers.push(newAnswer)\r\n            }\r\n        })\r\n        return newAnswers\r\n    }\r\n    renderQuestions = () => {\r\n        let counter = 0\r\n        if (this.state.exam.questions) {\r\n            return (\r\n                this.state.exam.questions.map(question => {\r\n                    return (\r\n                        <div className=\"question\">\r\n                            <Question options={question.options} questionText={question.questionText}\r\n                                      key={question.questionId}\r\n                                      questionId={question.questionId}\r\n                                      counter={counter = counter + 1}\r\n                                      onChange={(e, f) => this.onChangeAnswer(e, f)}/>\r\n                        </div>\r\n                    )\r\n                })\r\n            )\r\n        } else return null\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"exam\">\r\n\r\n                <div className=\"col text-center\">\r\n                    <h1>{this.state.exam.examName}</h1>\r\n\r\n                </div>\r\n                <div>\r\n                    {}\r\n                </div>\r\n                {this.renderQuestions()}\r\n                <div className=\"col text-right\">\r\n                    <Button className=\"btn btn-primary \" size=\"lg\" color=\"primary\" onClick={this.handleSubmit}>Submit</Button>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nclass Question extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            options: [],\r\n            checkedList: [],\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.setState({options: this.props.options})\r\n        let list = []\r\n        this.props.options.forEach(option => {\r\n            const temp = {\r\n                optionId: option.optionId,\r\n                checked: false,\r\n\r\n            }\r\n            list.push(temp)\r\n        })\r\n        this.setState({checkedList: list})\r\n    }\r\n\r\n    findQuestionChecked = (id) => {\r\n        let temp = null\r\n        this.state.checkedList.forEach(item => {\r\n            if (item.optionId === id) {\r\n                temp = item.checked\r\n            }\r\n        })\r\n        return temp\r\n    }\r\n\r\n    onChangeOption = (id) => {\r\n        let list = this.state.checkedList\r\n        list.forEach(item => {\r\n            if (item.optionId === id) {\r\n                item.checked = !item.checked\r\n            }\r\n        })\r\n        list.forEach(item => {\r\n            if (item.optionId !== id) {\r\n                item.checked = false\r\n            }\r\n        })\r\n        this.setState({checkedList: list})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h3>Q{this.props.counter}){' '}{this.props.questionText}</h3>\r\n                {this.state.options.map(option => {\r\n                    return (\r\n                        <div className=\"options \">\r\n                            <Label size=\"lg\" >\r\n                                <Input  id={option.optionId} type=\"checkbox\"\r\n                                       checked={this.findQuestionChecked(option.optionId)}\r\n                                       onClick={() => this.onChangeOption(option.optionId)}\r\n                                       onChange={() => this.props.onChange(this.state.checkedList, this.props.questionId)}\r\n                                        className=\"checkbox\"\r\n                                />\r\n                                {option.optionText}\r\n                            </Label>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(Exam)\r\n\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {Alert, Button, Form, FormGroup, Input, Label, ModalFooter, Table} from \"reactstrap\";\r\nimport moment from \"moment\";\r\nimport axios from \"axios\";\r\nimport Exam from \"./Exam\";\r\nimport {withRouter} from \"react-router-dom\";\r\n\r\n\r\n\r\n\r\nclass ExamList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            exams: [],\r\n            path: -1,\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        axios.get(\"/api/exams\").then(\r\n            res => {\r\n                console.log(res.data)\r\n                this.setState({exams: res.data})\r\n\r\n            }\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Table>\r\n                    <thead>\r\n                    <tr>\r\n                        <th>Exam Name</th>\r\n                        <th>Instructor</th>\r\n                        <th>Start Date</th>\r\n                        <th>End Date</th>\r\n                        <th>Take</th>\r\n                        <th></th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {this.state.exams.map(exam => {\r\n                        return (\r\n                            <tr key={exam.examId}>\r\n                                <td>{exam.examName}</td>\r\n                                <td>{exam.instructor.name}</td>\r\n                                <td>{moment(exam.startDate).format(\"DD/MM/YYYY hh:mm\")}</td>\r\n                                <td>{moment(exam.endDate).format(\"DD/MM/YYYY hh:mm\")}</td>\r\n                                <td><Button onClick={()=>{\r\n                                    this.props.history.push(`/exam/${exam.examId}`)\r\n                                }} className=\"btn btn-primary\" color=\"primary\">Take</Button></td>\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                    </tbody>\r\n                </Table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default withRouter(ExamList)","import React from \"react\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {Alert, Button, Form, FormGroup, Input, Label, ModalFooter, Table} from \"reactstrap\";\r\nimport { withRouter} from \"react-router-dom\"\r\nimport axios from \"axios\";\r\n\r\nclass Login extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            username:\"\",\r\n            password:\"\",\r\n            control:\"\",\r\n        }\r\n    }\r\n\r\n    handleSubmit=()=>{\r\n        if(this.state.username!==\"\" && this.state.password!==\"\" ){\r\n            const user={\r\n                username: this.state.username,\r\n                password: this.state.password,\r\n            }\r\n            if(user.username===\"student\" && user.password===\"1234\"){\r\n                this.props.history.push(\"/examList\")\r\n            }else if(user.username===\"instructor\" && user.password===\"1234\"){\r\n                this.props.history.push(\"/createExam\")\r\n            }else{\r\n                this.setState({control:\"InvalidUser\"})\r\n            }\r\n        }else{\r\n            this.setState({control:\"EmptyField\"})\r\n        }\r\n    }\r\n    handleUsername=(e)=>{\r\n        this.setState({username:e.target.value})\r\n    }\r\n    handlePassword=(e)=>{\r\n        this.setState({password:e.target.value})\r\n    }\r\n    showAlert=()=>{\r\n        if(this.state.control===\"EmptyField\"){\r\n            return(<Alert className=\"alert alert-danger\" color=\"danger\">\r\n                Please Fill in the Required Fields!\r\n            </Alert>)\r\n        }else if(this.state.control===\"InvalidUser\"){\r\n            return(<Alert className=\"alert alert-danger\" color=\"danger\">\r\n                Username or Password is Wrong!\r\n            </Alert>)\r\n        }\r\n        else{\r\n            return null\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"login-wrapper\">\r\n                <div>\r\n                    <h1>Login</h1>\r\n                    {this.showAlert()}\r\n                    <Form onSubmit={(e) => {\r\n                        e.preventDefault()\r\n                    }}>\r\n                        <FormGroup>\r\n                            <Label for=\"username\">Email</Label>\r\n                            <Input type=\"text\" name=\"user\" id=\"username\" placeholder=\"username\" onChange={(e)=>this.handleUsername(e)}/>\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <Label for=\"password\">Password</Label>\r\n                            <Input type=\"password\" name=\"password\" id=\"password\" placeholder=\"password\" onChange={(e)=>this.handlePassword(e)}/>\r\n                        </FormGroup>\r\n                        <div className=\"col text-right\">\r\n                            <Button type=\"submit\" className=\"btn btn-primary\" size=\"lg\" color=\"primary\" onClick={() => {\r\n                                this.handleSubmit()\r\n                            }}>Submit</Button>\r\n                        </div>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(Login)","import './styles/App.css';\nimport React from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport CreateExam from \"./components/CreateExam\";\nimport \"./styles/CreateExam.css\"\nimport ExamList from \"./components/ExamList\";\nimport Exam from \"./components/Exam\";\nimport Login from \"./components/Login\";\nimport {BrowserRouter, Route} from \"react-router-dom\";\nimport Switch from \"react-bootstrap/Switch\";\n\nfunction App() {\n  return (\n      <div className=\"page h-100\">\n        <BrowserRouter>\n          <Switch>\n            <Route path=\"/\" exact component={Login}  />\n            <Route path=\"/login\" exact>\n              <Login/>\n            </Route>\n            <Route path=\"/createExam\">\n              <CreateExam/>\n            </Route>\n            <Route path=\"/examList\">\n              <ExamList/>\n            </Route>\n            <Route path=\"/exam/:examId\" component={Exam}/>\n          </Switch>\n        </BrowserRouter>\n      </div>\n\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}